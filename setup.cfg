# This file is used to configure your project.
# Read more about the various options under:
# http://setuptools.readthedocs.io/en/latest/setuptools.html#configuring-setup-using-setup-cfg-files

[metadata]
name = foundry-dev-tools
description = Seamlessly run your Palantir Foundry Repository transforms code on your local machine.
author = Nicolas Renkamp, Jonas Wunderlich
author_email = nicolas.renkamp@merckgroup.com, jonas.wunderlich@merckgroup.com
license = Apache License, Version 2.0
license_files =
    LICENSE
long_description = file: README.md
long_description_content_type = text/markdown; charset=UTF-8
url = https://github.com/emdgroup/foundry-dev-tools
project_urls =
    Documentation = https://emdgroup.github.io/foundry-dev-tools
    Source = https://github.com/emdgroup/foundry-dev-tools
# Change if running only on Windows, Mac or Linux (comma-separated)
platforms = any
# Add here all kinds of additional classifiers as defined under
# https://pypi.python.org/pypi?%3Aaction=list_classifiers
classifiers =
    Development Status :: 5 - Production/Stable
    Programming Language :: Python
    License :: OSI Approved :: Apache Software License


[options]
zip_safe = False
packages = find_namespace:
include_package_data = True
package_dir =
    =src
# Add here dependencies of your project (semicolon/line-separated), e.g.
install_requires =
    importlib-metadata; python_version<"3.8"
    pyarrow
    pandas
    requests
    fs
    backoff
# The usage of test_requires is discouraged, see `Dependency Management` docs
# tests_require = pytest; pytest-cov
# Require a specific Python version, e.g. Python 2.7 or >= 3.4
python_requires = >=3.8,<4.0

[options.packages.find]
where = src
exclude =
    tests

[options.extras_require]
# to run transforms and CachedFoundryClient, pyspark is required
transforms = pyspark>=3.0.0
testing =
    pytest
    pylint
    pytest-cov
    pytest-mock
    pytest-spark
    requests-mock
    fsspec
    timeflake
    %(transforms)s
integration-testing =
    %(testing)s
    dask
    fastparquet

[options.entry_points]
fsspec.specs =
    foundry = foundry_dev_tools.fsspec_impl.FoundryFileSystem

[test]
# py.test options when running `python setup.py test`
# addopts = --verbose
extras = True

[tool:pytest]
# Options for py.test:
# Specify command line options as you would do when invoking py.test directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
addopts =
    --cov=src --cov-report term --cov-report xml:coverage.xml --cov-report html:htmlcov
    --verbose
norecursedirs =
    dist
    build
    .tox
testpaths = tests

markers =
    no_patch_conf: don't use autouse config patch fixture


[build_sphinx]
source_dir = docs
build_dir = build/sphinx

[devpi:upload]
# Options for the devpi: PyPI server and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no-vcs = 1
formats = bdist_wheel

[flake8]
# Some sane defaults for the code style checker flake8
exclude =
    .tox
    build
    dist
    .eggs
    docs/conf.py

[pyscaffold]
# PyScaffold's parameters when the project was created.
# This will be used when updating. Do not change!
version = 4.4
package = foundry_dev_tools

extensions =
    github_actions
    markdown
    pre_commit
[pycodestyle]
max-line-length = 120

